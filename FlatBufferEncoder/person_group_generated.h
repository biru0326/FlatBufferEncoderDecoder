// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERSONGROUP_PERSONGROUP_H_
#define FLATBUFFERS_GENERATED_PERSONGROUP_PERSONGROUP_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace PersonGroup {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  int8_t gender() const {
    return GetField<int8_t>(VT_GENDER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_AGE, 4) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyField<int8_t>(verifier, VT_GENDER, 1) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(int8_t gender) {
    fbb_.AddElement<int8_t>(Person::VT_GENDER, gender, 0);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t age = 0,
    float weight = 0.0f,
    int8_t gender = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_age(age);
  builder_.add_name(name);
  builder_.add_gender(gender);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t age = 0,
    float weight = 0.0f,
    int8_t gender = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return PersonGroup::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUPNAME = 4,
    VT_AVERAGE_AGE = 6,
    VT_AVERAGE_WEIGHT = 8,
    VT_PERSONS = 10
  };
  const ::flatbuffers::String *groupname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUPNAME);
  }
  float average_age() const {
    return GetField<float>(VT_AVERAGE_AGE, 0.0f);
  }
  float average_weight() const {
    return GetField<float>(VT_AVERAGE_WEIGHT, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<PersonGroup::Person>> *persons() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PersonGroup::Person>> *>(VT_PERSONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUPNAME) &&
           verifier.VerifyString(groupname()) &&
           VerifyField<float>(verifier, VT_AVERAGE_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVERAGE_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_PERSONS) &&
           verifier.VerifyVector(persons()) &&
           verifier.VerifyVectorOfTables(persons()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_groupname(::flatbuffers::Offset<::flatbuffers::String> groupname) {
    fbb_.AddOffset(Group::VT_GROUPNAME, groupname);
  }
  void add_average_age(float average_age) {
    fbb_.AddElement<float>(Group::VT_AVERAGE_AGE, average_age, 0.0f);
  }
  void add_average_weight(float average_weight) {
    fbb_.AddElement<float>(Group::VT_AVERAGE_WEIGHT, average_weight, 0.0f);
  }
  void add_persons(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PersonGroup::Person>>> persons) {
    fbb_.AddOffset(Group::VT_PERSONS, persons);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> groupname = 0,
    float average_age = 0.0f,
    float average_weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PersonGroup::Person>>> persons = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_persons(persons);
  builder_.add_average_weight(average_weight);
  builder_.add_average_age(average_age);
  builder_.add_groupname(groupname);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *groupname = nullptr,
    float average_age = 0.0f,
    float average_weight = 0.0f,
    const std::vector<::flatbuffers::Offset<PersonGroup::Person>> *persons = nullptr) {
  auto groupname__ = groupname ? _fbb.CreateString(groupname) : 0;
  auto persons__ = persons ? _fbb.CreateVector<::flatbuffers::Offset<PersonGroup::Person>>(*persons) : 0;
  return PersonGroup::CreateGroup(
      _fbb,
      groupname__,
      average_age,
      average_weight,
      persons__);
}

inline const PersonGroup::Group *GetGroup(const void *buf) {
  return ::flatbuffers::GetRoot<PersonGroup::Group>(buf);
}

inline const PersonGroup::Group *GetSizePrefixedGroup(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PersonGroup::Group>(buf);
}

inline bool VerifyGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PersonGroup::Group>(nullptr);
}

inline bool VerifySizePrefixedGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PersonGroup::Group>(nullptr);
}

inline void FinishGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonGroup::Group> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonGroup::Group> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PersonGroup

#endif  // FLATBUFFERS_GENERATED_PERSONGROUP_PERSONGROUP_H_
